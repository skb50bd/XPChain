@page "/projects"
@inject HttpClient Http

@using Brotal.Extensions
@using Domain

<h1>Projects</h1>

<div class="card mb-3 mt-3">
    <div class="card-header">
        New Project
    </div>
 
    <div class="card-body">
        <div class="form-group row">
            <label for="org-id"
                   class="col-sm-2 col-form-label">
                Organization ID
            </label>

            <div class="col-sm-10">
                <input type="text"
                       class="form-control"
                       id="org-id"
                       placeholder="Organization ID"
                       @bind="newProject.OrganizationId" />
            </div>
        </div>

        <div class="form-group row">
            <label for="title"
                   class="col-sm-2 col-form-label">
                Title
            </label>
            <div class="col-sm-10">
                <input type="text"
                       class="form-control"
                       id="title"
                       placeholder="Title"
                       @bind="newProject.Title" />
            </div>
        </div>

        <div class="form-group row">
            <label for="reward"
                   class="col-sm-2 col-form-label">
                Reward
            </label>

            <div class="col-sm-10">
                <input type="number"
                       class="form-control"
                       id="reward"
                       placeholder="Reward"
                       @bind="newProject.Reward" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-10">
                <button type="submit"
                        class="btn btn-primary"
                        @onclick="addProject">
                    Add
                </button>
            </div>
        </div>
    </div>
</div>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Org ID</th>
                <th>Title</th>
                <th>Reward</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proj in projects)
            {
                <tr>
                    <td>@proj.Id.ToString()</td>
                    <td>@proj.OrganizationId</td>
                    <td>@proj.Title</td>
                    <td>@proj.Reward</td>
                    <td>@proj.Meta.Timestamp</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Project newProject = new Project();

    private IEnumerable<Project> projects;

    protected override async Task OnInitializedAsync()
    {
        projects = await Http.GetJsonAsync<IEnumerable<Project>>("api/Projects");
        Console.WriteLine(projects?.First().Title);
    }

    public async Task addProject()
    {
        newProject.Meta = new Metadata { Creator = Guid.NewGuid(), Timestamp = DateTime.Now.Timestamp() };

        await Http.PostJsonAsync("api/Projects", newProject);
        projects = await Http.GetJsonAsync<IEnumerable<Project>>("api/Projects");
        newProject = new Project();
        StateHasChanged();
    }
}
